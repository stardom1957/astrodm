2020-028
2. Date et heures UTC-4, etc. comment traiter? Dans Astropy? : FAIT
   - datetime (heure locale)
   - objet astropy.Time (heure UTC)

4. Dates Besselienmes FAIT
   - méthode dans Coordinates_learn

6. fichier observatoire :: si non trouvé ... à régler

7. fichiers de données (dans rép. mesures) : vérifier conformité de la nomenclature des champs avec cds et autres.

9. En vue de créer un sommaire de toutes les observations : stratégie pour enregistrer le résultat final (à partir du sommaire) des observations dans un fichier (csv?) dans le répertoire p. e. "...\STF205\STF205_p2020-018_resultat.csv"?

15. attr row_limit pour une requète, comment ? FAIT dans queries.py

18. doubles_reduction... Toutes les fonctions, écrire la documentation aux normes de Python. OBSOLÈTE

19. Astroquery, dans le résultat d'une requête, comment accéder aux métadonnées : p. ex. fata unit, format et description ?
pour le champ 'WDS' : result_rech_WDS[0]['WDS'].info donne :
'''
name = WDS
dtype = str10
description = WDS name (based on J2000 position)
class = MaskedColumn
n_bad = 0
length = 1
'''

donc, result_rech_WDS[0]['WDS'].info.description donnera : 'WDS name (based on J2000 position)'
et, result_rech_WDS[0]['RAJ2000'].item() donnera la valeur du champ

25. recherche_wds.py : le champ Notes contient des lettres, par ex pour 'STF  60' (AB), 'NO P' comment obtenir description de ces codes? Ces codes se trouvent dans le fichier suivant de WDS :
    voir http://www.astro.gsu.edu/wds/Webtextfiles/wdsweb_format.txt.

27. recherche_wds.py : type(wds_notes[0]) est 'astropy.table.table.Table'. Comment imprimer colonnes Text et RefCode seulement ? comme ceci : wds_notes[0].keep_columns(['Text', 'RefCode']) FAIT

30. Structure des données et normalisations :
 - programmes normalisés P2020-018, P2020-021 FAIT
 - répertoire de programme = P2020-018 FAIT
 - dans ..._info_source.csv : si ID WDS non disponible à partir d'une autre source, inscrire valeur obtenue dans script de recherche WDS. FAIT

31 - echelleMG : serait-il avantageux d'utiliser un pd.dataFrame ?
                     E      delta_E
'microguide 2x'  12.22         0.03
'microguide 5x'  15.51         0.03

32. theta final évaluation de l'incertitude : ne peut être 0. doit être min 0.25° :: à régler

33. doubles_reduction.py :
- cas de N= NaN dans observations, no 1, il ne faut pas analyser. FAIT
- voir comment traiter les éventuels fichiers _sep_Nx.csv.csv, etc, laissés dans mesures : OK ils ne sont pas pris en compte FAIT

34. réduction de stfa43 (fichier _observations.csv créé par script) non fonctionnelle. à cause du encoding ascii vs encoding='ISO-8859-1', voir la question des encodages lorsque les fichiers sont créés par script ou par notepad Windows. La solution, bien sûr, est de créer les fichiers informations et observations uniquement par le script crée_structure_data_système_v03.py. réglé pour utf-8 FAIT

35. doubles_reduction.py : dans observations.csv N doir commencer à 1 et utiliser la valeur N pour boucler et aussi charger les fichier data au fur et à mesure NON

36. ...theta_Nx.csv : pourquoi "" en seconde ligne ? SAIS PAS, MAIS OK FAIT

37. comment traiter les dtypes des valeurs des séries qui ont un NaN dans l'un des éléments? NaN semble être float64, alors 1 dans l'autre champ sera convertit en float64. FAIT pd.isna

38. pour stfa 58 : source WDS non trouvée, et obs 2 est NaN, alors pourquoi ça fonctionne? pcq le broacasting ne tient pas compte des NaN FAIT

39. pourquoi observations_df['N'][0] = 4 ne fonctionne pas ? OK il faut utiliser observations_df.loc(...) FAIT

40. recherche_wds_v02.py : il faut retravailler la normalisation de strSource et strSource_format_pour_Notes : le cas STF 205 ne fonctionne pas pour wds notes. Voir aussi même fonction dans les autres scripts. FAIT

41. crée_structure : FAIT
 1- intégrer demander lecture structure précédente (comme double_deduction ...) dans une fonction FAIT
 2- intégrer lecture fichiers informations etc dans une fonction FAIT
 3- demander enregistrement (oui|non) et intégrer enregistrement dans une fonction FAIT
 4- après lecture des fichiers en 2, demander si sauvegarde des df (oui|non), puis quitter le programme avec rappel des noms des dataFrames créés et rappel des commandes pour enregistrer après modification
 5- si non lecture de fichiers, alors créer les dataFrames à partir des variables internes et aller à 4 FAIT

42. liste_progr_observations.py : continuer afin de valider si tous les renseignements désirés peuvent être tirés de l'architecture de données en l'état actuel.

43. liste_progr_observations : comment compter le nombre de programmes d'observations ? FAIT

44. BUG liste_progr_observations : liste_prog_df.fillna(' ', inplace=True), effet de bord étrange dans représentation des floats !!! --- NON UTILISÉ ---

45. liste_progr_observations : comment ajouter un second index pour indiquer les unités à la liste? voir test_multiindex.py et tabulate module

46. package astro_doubles : OBSOLÈTE
 1- comment documenter à la manière de man?
 2- pour chaque package : écrire une fonction version pour rapporter la version

47.  Produire une liste csv des sources :: nom, ad, dec, choisies. Ceci afin de servir aux script des éphémérides.

48. BUG recherche_wds_v07.py :: recherche des notes dans WDS. Cas de "hj 1906" non traité correctement car déjà normalisé à 7 caractères. Pour lemoment, bypass p. d. f. sur valeurs à 7 car.

NOUVELLE VERSION POUR LUCKY IMAGING
Garder la même structure de fichiers pour ne pas casser le code pour Microguide et en concevoir une nouvelle pour lucky imaging (li).

Différence majeure : le li produit beaucoup plus de données et la réduction sera faite par REDUC qui produira des fichiers txt (logs) de résultats en sortie. Le nouveau code produira les mêmes tableaux sommaires de planification et de résultats qu'avant (avec les csv du microguide), mais il sera adapté pour exploiter les fichiers csv de sortie des réductions du lucky imaging (produits par le nouveau module de astrodm). De cette façon, les quelques résultats obtenus avec le microguide ne seront pas perdus et le code fonctionnera avec les deux méthodes de mesure.

49. Adaptations et développement pour le lucky imaging (d'abord dans dev\STTA254 et dev\SFT60) :
 49.0 - fichier _observations.csv : le champ 'instrument' aura comme valeurs possibles : 'Lucky Imaging', 'Microguide 5x' et 'Microguide 2x'. L'instrumentation détaillée se trouvera dans le dossier d'acquisition des observations (instrumentation.txt)?

 49.1 - fichier source_observations.csv : le nouveau champ index_cal_e contiendra l'index de calibration d'échelle (voir 57.6)

 49.2 - Modifier module crée_structure_data_système_v10.py pour tenir compte de l'instrumentation : Microguide, Lucky Imaging.

 49.3 - structure des dossiers, nouvelle tenant compte de limitation de Windows chemin max = 255 car

 49.4 - calibration (photo et échelle) :
     Prévoir la réutilisation des fichiers de calibration photo et échelle d'une observation à une autre :: avec hiérarchie session /programme/bloc :
  49.4.1 - nomenclature la plus concise possible des fichiers dark, bias et flats (inc. nom programme/bloc si besoin de référer?)
  49.4.2 - tous les fichiers darks, bias et flat dans même dossier que acquisition des mesures
  49.4.3 - nomenclature des fichiers fits avec le nom de la source

50. Réviser la liste de codes des  notes. Placer dans un data frame? L pour li. Documenter la sructure des notes sur trois caractères par ex. 'C M'. FAIT

51. Que peut-on tirer du log de FC pour inclure dans _observation.csv?
52. Instrumentation, codes dans un dataframe : Microguide 2x, lucky imaging, etc.

53. toutes les fonctions / modules : traitement en fonction de l'instrumentation.

54. BUG crée_structure_data_système_v10 : il est possible de modifier les df information et observation dans Variable Explorer. Cependant la fonction enregistre_fichiers() ne reconnaît ces modifications car elle sauvegarde le jeu de données original du df tel que lu à partir du fichier csv en début de programme. Les deuc df en question montrent les bonnes données dans la console.

 --- SOLUTION TEMPORAIRE --- 
  Exécuter les commandes suivantes pour engegister :
   informations_df.to_csv(nom_complet_fichier_information_systeme, index=False, encoding='utf-8'), suivi de 
   observations_df.to_csv(nom_complet_fichier_observations, index=False, encoding='utf-8')

55. doublesListeProgrammes_v05.py :: petits changements :
 - pd.set_option('display.max_row', 1000) -> pd.set_option('display.max_row', 10000) # max de lignes listées FAIT
 - 'N': obsN, -> 'N (obs)': obsN, # en-tête de colonne du no d'observation FAIT

56. Les statistiques descriptives des mesures ne doivent pas être utilisées car les incertitudes proviennent de la résolution du microguide (= instrument à lecture analogique) et doivent être additionnées en quadrature. Le sigma de chaque mesure rho est donc 0.5 div (la moitié de la plus petite division). Le sigma de theta est 1° (l'échelle circulaire du microguide est divisée en 5° et l'estimation peut être faite à un degré près).

 56.1- les statistiques descriptives min max et moyenne sont OK

 56.2-  Il faudra ABSOLUMENT RÉVISER le calcul de la propagation des incertitudes et des valeurs finales rapportées : delta vs sigma :: propagation des incertitudes en quadrature sur le calcul de la moyenne. Référence Maths\ErrorAnalysis.pdf.

57. Développement de la structure de fichiers des calibrations d'échelle(s) :
 57.1 - comprend un fichier maître des calibrations 'cal_e\master_calibrations_e.csv' qui contient toutes les valeurs de calibrations d'échelle. Les deux constantes de calibration E du Microguide 2x et 5x, calculée dans 2020-012 doivent être incluse et la structure de données versée dans cal_e

 57.3 - PRIORITÉ 1 le fichier _observations.csv doit contenir un nouveau champ pour accueillir l'index (un pointeur) de calibration d'échelle dans dossier cal_e, p. e. sous la forme 2021-10-08b01. Cet index permet : 
   a) le cas échéant, de retrouver les données d'acquisition de la calibration et de réduction dans le dossier cal_e;
   b) de retrouver les constantes de calibrations dans le fichier maître des calibrations.

 57.4 - lors des réductions des observations (anciennes et nouvelles), tous les modules de réductions doivent se référer à l'index de calibration pour l'observation concernée pour retrouver les constantes de calibration correspondantes dans le fichier maître des calibrations pour effectuer les calculs.

 57.5 - puisque chaque réduction pour fin de calibration d'échelle est effectuée à l'extérieur de astrodm (principalement dans REDUC), la maintenance du fichier maître des calibrations sera effectuée programmatiquement par le module astrodm reduc_cal_E.

 57.6 - PRIORITÉ 1 struture de master_calibrations.csv : FAIT
Début
  index_cal_e,val_E,sigma_E,type_cal,id_masque,id_filtre,note
Fin

index_cal_e, constitué de ::
 date string len=10 (yyyy-mm-jj)
 b car len=1 (séparateur de bloc d'observation)
 nn short int len=2 (no bloc d'observation [01, 99], donc max 99 bloc par session d'observation)
val_E :: float64 len=variable (échelle en "/px si type=p ou "/div si type=m)
sigma_E :: float64 len=variable (écart type ou standard error of the mean)
type_cal :: car len=1 (t=temps de dérive, f=masque à fentes)
id_masque :: UPPER str (identité du masque à fente utilisé : p. e. A3mm ou B3mm)
id_filtre :: car len=3 (identité du filtre utilisé, p. e. Ha1)
note :: string len=[0, 100] (note entre '')

 57.7 - PRIORITÉ 1 dans cal_e : à partir de master_calibrations_e.csv des index id_masque, et id_filtre, créer des fichier csv des caractéristiques de chacun pour servir au modules qui ont besoins de ces valeurs pour calculer la séparation angulaire de la «paire artificielle» lors d'une calibration d'échelle. FAIT
  57.7.1 - struture de master_masques_cal.csv :
   Début
    id_masque,LfplusDF,sigma_LfplusDf,note
   Fin
  57.7.2 -  la réductions de mesures est faite dans un cahier Jupyter lab (2021-021) et les résultats sont inscrits à la main dans le ficher

 57.7.2 - struture de master_filtres_cal.csv :
  Début
   id_filtre,val_Lo,sigma_Lo
  Fin

58. reductionv_02.py : pourquoi le fichier reduc_brut.csv créé a McIntosh CR au lieu de Windows (CRLF)? RÉGLÉ par écriture avec handle f au lieu de package csv. FAIT

59. reduction_vxx.py :
 59.1 - intégrer sélection interactive du dossier de reduc FAIT

 59.2 - informations supplémentaires tirées des fichiers log de REDUC et de FC :
   59.2.1 id de filtre et masque maintenant dans le fichier log d'acquisition de FC : l'us doit sélectionner ce fichier FAIT

   59.2.2 dans master_calibrations_e la note doit être prise du log d'acquisition (voir aussi pourquoi l'encodage UTF-8 n'est pas correct car == à) SOLUTION NE PAS UTILISER D'ACCENTS

   59.2.3 ajouter à «master_calibrations_e.csv» : température du to, date et heure du milieu d'acquisition FAIT

   59.2.4 date et heure d'acquisition : toutes en utc FAIT

   59.2.5 dans les cas où index_cal_e est déjà présent dans master_calibrations_e, s'abord demander à l'us s'il faut continuer et si oui, présenter la différence entre E et E_sigma calculés FAIT

   59.2.6 ne pas oublier de trier master_calibrations_e_df sur index_cal_e avant d'écrire dans le fichier csv FAIT

   59.2.7 dans master_calibrations_e_df, seulement les valeurs suivantes ont un espace au début : dt_obs, type_cal, id_masque et id_filtre. Je comprend que les valeurs numériques d'en ont pas,
          mais pourquoi celles là? investiguer le format une fois les données écrites dans csv OK SI ÉCRITURE PAR df.to_csv()

   59.2.9 lors de l'impression de master_calibrations_e_df, la valeur de temp_to pour 2021-10-08b01 est listé 9 au lieu de 9.3! Aussi, comment contrôler l'impression des décimales? RÉGLÉ!


 59.3 - développer et intégrer 57.6 et 57.7 dans ce module. FAIT

 59.4 - à partir de '2021-021_calibration_EdgeHD8_masque_v3.ipynb' :
    59.4.1 terminer propagation des incertitudes pour calcul de Z. FAIT

    59.4.2 terminer propagation des incertitudes pour calcul de E et vérifier soigneusement.

 59.5 - intégrer dans astrodm.doublesOutils.

 59.6 - module extrait_et_exporte_mesures_brutes() :
   59.6.1 il faudra normaliser tous les index_ en mimuscules pour faciliter les recherches par ex 'a3mm' et 'ha1' FAIT

   59.6.2 normaliser aussi dans les fichiers master FAIT

 59.7 -  la recherche des valeurs dans les fichiers master_* devrait vérifier si plus d'une occurence existe FAIT

60. astrodm, tous les modules concernés : après lecture de observations, paramétriser traitement selon 'instrument' : 'Lucky Imaging', 'Microguide 2x' et 'Microguide 5x' en préparation pour instrumentation lucly imaging.
 60.1 crée_structure_data_système_v10 pour nlle structure FAIT
 60.2 package astrodm modules rech_wds et rech_wds_notes utiliser RE pour normaliser src à 7 car pour recherche des notes WDS et TESTER soigneusement pour un grand nombre de cas!!! FAIT
 60.2.1 cas des 'H 3 101' il faut normaliser à 'H x*' x=1, 3, etc FAIT
 60.3 module recherche_wds_v07.py utiliser astrodm pour recherches WDS FAIT

61. crée_structure_data_système :
 61.1 pour information du système, déterminer constellation programmatiquement à partir de AD et DEC du système? Examiner astropy.coordinates.get_constellation!
 62.2 numérotation des blocs d'observations b1 devient b01.
 62.3 pour un système données, le résultat peut être transféré dans portable capture.

JEUX DE DONNÉES JEUX DE DONNÉES JEUX DE DONNÉES JEUX DE DONNÉES JEUX DE DONNÉES JEUX DE DONNÉES JEUX DE DONNÉES JEUX DE DONNÉES
JEUX DE DONNÉES JEUX DE DONNÉES JEUX DE DONNÉES JEUX DE DONNÉES JEUX DE DONNÉES JEUX DE DONNÉES JEUX DE DONNÉES JEUX DE DONNÉES

62. dans dev, les dossiers suivants servent au développement :
  62.1 D:\DOCUMENTS\Astronomie\dev\STF205\P2021-021\A,BC\mesures\N1\b01 pos et sep
  62.1 D:\DOCUMENTS\Astronomie\dev\STF205\P2021-021\A,BC\mesures\N2\b01 pos et sep

  62.2 D:\DOCUMENTS\Astronomie\dev\STFA58\P2021-023\AC\mesures\N1\b01 pos seulement
  62.3 D:\DOCUMENTS\Astronomie\dev\STTA254\P2021-023\AB\mesures\N1\b01
  62.4 D:\DOCUMENTS\Astronomie\dev\cal_e\2021-10-08b01 calibration E
  62.5 D:\DOCUMENTS\Astronomie\dev\cal_e\2021-10-08b02 calibration E

63. listeProgrammesDates_v05 saisir ordre de tri FAIT TERMINÉ

64. champ note dans doubleOutils.notes_obs_dict: TERMINÉ
  64.1 réviser? FAIT
  64.2 créer à partir d'un csv NON

65. doublesListeReductionsObservations_v09.imprime_reductions_ed : NON
  65.1 saisir ordre de tri comme listeProgrammesDates_v05. NON

66. nouveau module (indépendant?) : pour exploitation durant les acquisitions qui permet de créer la structure de fichiers de l'observation en cours. Ceci afin d'éviter d'utiliser le module astrodm.crée_structure_data_système.

67. pour astrodm.rech_wds(src, paire) voir si WDSGaiaDR2_Ver3.xlsx contient des infos intéressantes pour src / paire!

68. nouveau module pour lister les master_*.csv.

##############################################################################################################
### 2021-11-30 ############################### NOUVELLE STRUCTURE DE FICHIERS ################################
##############################################################################################################

OBSOLÈTE
69. Très important. L'ancienne structure de dossiers et fichierS pour les observations au micro guide n'est pas  OBSOLÈTE
compatible avec celle du LI. Pour référence voir P2021-023, STTA254 AB.
  69.1 Le nouvel emplacement de _observations.csv est dans le répertoire de la paire : par ex. ... STTA254\P2021-023\AB\ contient le fichier STTA254_observations.csv

TABLEAU DES PROGRAMMES D'OBSERVATIONS

  69.2 Le fichier _observations.csv contiendra les infos pour la planification ainsi que les résultats des réductions.   OBSOLÈTE
       a. Le module listeProgrammesDates_vxx.py sera modifié pour exploiter ces données pour lister les observations planifiées et les observations complétées.
          Contrairement à la version précédente, qui calculait les réductions de toutes les observations valides pour toutes les paires sous la structure entière
          de dev ou med, les résultats des réductions seront tirés du fichier _observations.csv correspondant de chaque paire et tous les blocs d'observations
          seront listés, c.-à-d. que les moyennes ne seront pas calculées. Les observations planifiées seront également listées.

SAISIE DES DONNÉES DE PLANIFICATION

       b. Au départ, _observations.csv d'une paire ne contient qu'une seule ligne où N=0 avec seulement obs_prog, paire et 'P  ' dans note. Dans l'exemple qui suit,
          avec l'information tirée de STTA254_observations.csv,  nous savons que nous avons planifié d'observer STTA254 AB dans le programme P2021-023 :

EXEMPLE D'UN _observations.csv

<<<<<
N,obs_bloc,obs_prog,paire,obs_DH_UTC,obs_epoque_B,rho,rho_sigma,theta,theta_sigma,observatoire,observateur,transp,seeing,temp_to,humid,press_bar,telescope,index_cal_E,remarques,note
0,,2021-023,AB,,,,,,,,,,,,,,,,,P  
>>>>>

      c. _observations.csv doit comprendre nom de la paire ou NPL. Le module crée_structure_data_système_*.py devra être modifié pour cette nouvelle structure. ############################

CONDITIONS D'ENTRÉES DU MODULE reduction_*.py

  69.3 reduction_*.py est le module de réduction pour les observations en «Lucky Imaging ». Il comprend deux types de réduction : le premier 'ech' pour calculer l'échelle à partir   PASSÉ DATE
       des données de REDUC par l'expérience de Young. Le second « complète » calcule rho, thêta (avec sigma) moyens pour l'ensemble des N et tous les blocs bnn en dessous.

    a. Le résultat de chaque réduction complète sera consigné dans le dossier du programme d'observation (voir exemple 69.2.b)

  69.4 Les modalités sont les suivantes pour une observation « complète », par ex. pour STTA254 AB :
    a. - STTA254\STTA254_info_système.csv contient les informations du système lues par le module lors de la réduction et listé dans le rapport pour référence. Evidemment,   PASSÉ DATE
         les informations de la paire étudiées se trouvent dans ce fichier (produit par le module crée_structure_data_système_*.py).

    b. - Au départ, comme tous les _observations.csv, STTA254\P2021-023\AB\STTA254_observations.csv comprend un N=0 pour la planification (voir 69.2) : cette ligne disparaîtra lors de la
         réduction de N=1.

    c. - Dans chaque répertoire Nx (p. e. ...\STTA254\P2021-023\AB\N1\ ), il y a un répertoire de tête pour chacun des blocs d'observation bnn :
       i.  - FACULTATIF les données et le log des darks sont situées dans ...\STTA254\P2021-023\AB\N1\\bnn\cal
      ii.  - les données et le log d'acquisition de la séparation sont situées dans ...\STTA254\P2021-023\AB\N1\\bnn\sep, le nom commence par le nom du système
     iii.  - les données d'environement sont dans environement.txt
      iv. - le log de REDUC pour la réduction de la sérapation se trouve dans ...\STTA254\P2021-023\AB\N1\\bnn\sep\reduc
       v. - les données et le log d'acquisition de l'angle de position sont situées dans ...\STTA254\P2021-023\AB\N1\\bnn\pos
      vi. - le log de REDUC pour la réduction de l'angle de position se trouve dans ...\STTA254\P2021-023\AB\N1\\bnn\pos\reduc

PROCESSUS DE RÉDUCTION COMPLÈTE

    Dans reduction_*.py, pour exécuter la réduction complète, le processus se déroule comme suit  :

    d. - L'usager pointe vers ...\STTA254\AB\P2021-023. Le module reduction_*.py s'occupe du reste :
       i. - Il vérifie s'il y a des données valides dans Nx et les dossiers blocs pour sep et pos dans la structure de fichiers selon les modalités stipulés dans 69.4.c.
       
      ii. - Il parcourt de manière itérative tous les bnn et calcule rho_moyen, rho_moyen_sigma, theta_moyen et theta_moyen_sigma pour l'observation N=1
     iii. - Il demande à l'usager si l'observation est complète (en particulier si N=1, mais probablement pas nécessaire si N > 1).
      iv. - Il inscrit les résultat pour N=1 dans STTA254_observations.csv. Par exemple :

    e. - L'usager doit répéter 69.4.d pour chaque N du programme d'observation. Les résultats sont ajoutés au fichier observation.csv sous N et no_bloc pour chaque itération.

OBSOLÈTE
70. Le module listeReductions_*.py sera modifié pour lister les réductions. En parcourant la structure de dev ou med, pour chaque système, paire, _info_systèmes.csv et _observations.csv seront   PASSÉ DATE
    lus. Dans _observations.csv, une moyenne de rho et thêta (avec les incertitudes) seront calculée pour tous les N trouvés. La moyenne de rho et thêta (avec les incertitudes) sera alors listée
    et l'indication N (1, 2, 3, etc) indiquera le nombre d'observations. Il est préférable d'avoir N=2 au moins. Le module devra être capable de :

  70.1 Trier et filtrer sur différents obs_prog ,paire, const, etc.

71. Pour reduction_v10, il y a des données d'acquisition dans D:\DOCUMENTS\Astronomie\dev\STTA254\... NOTE

OBSOLÈTE
72. reduc_cal_E_*.py devient reduction_*.py. (toutes les occurences renommées dans ce fichier et sur disque, de manière récursive dans dev\*). FAIT

73. Nouveau module pour lister le fichier maître de calibrations et facultativement, les deux autres fichiers maîtres.

74. reduction_v11.py :
  74.1 do.lire_informations_et_observations(nom_complet_fichierInfo, nom_complet_fichier_observations) initialise do.informations_df et do.observations_df
       - trouver pourquoi l'inpression de ces df est sur seulement 80 car au lieu de 130 OK
       - type_reduc complete ligne 733   + nlle struct dossiers FAIT
       - lire un jeux de données complet et valider tous les dtypes et le comportement si pas de données (NaN, etc.) FAIT OK sauf transp
       - pourquoi transp lorsque vide donne dtype <na>??????????????????

75. REDUC, PROCÉDURE pour (Nx,bnn), faire simultanément REDUC de pos et sep (deux instances de REDUC) : pos pour obtenir delta_matrice? Ensuite,
    prendre valeur de delta_matrice de pos et placer dans delta_matrice de sep. Alors, dans reduction_v11.py, on pourra utiliser le theta et theta_sigma
    du log REDUC de sep plutôt que cette de pos! FAIT TERMINÉ

76. Optimisations : TERMINÉ
  76.1 ', '.join(liste) pour créer enregistrements FAIT
  76.2 s. center. ljust et rjust FAIT
  76.3 functions can return multiples values (list, tupple, etc) OK
  76.4 augmented statement += for a list FAIT
  
77. reduction_v14.py : TERMINÉ
  77.1 mise en oeuvre de la classe Acquisition pour les données extraites du log acquisition pour 'ech' FAIT
  77.2 mise en oeuvre de la classe Acquisition pour les données extraites du log acquisition pour 'complete' FAIT
  77.3 extrait_du_log_acquisition() compléter suppression des anciennes variables globales FAIT
  77.4 mise en oeuvre de la classe Reduction FAIT
  77.5 plus de '\\', plutôt '/' sauf si s.split('\\') FAIT
  77.6 tester STTA254 avec b02 fictif avec logs fictifs FAIT
  77.7 lecture_mesures_brutes() modifier avec nom complet fichier fich_mesures_brutes en paramètre  FAIT
  77.8 rendu à réduction po 'complete' FAIT
  77.9 libre FAIT
  77.10 enlever #debug ... FAIT
  77.11 vérifier traitement 'ech' b01 et b02 FAIT
  77.12 vérifier traitement 'complete' N1 b01 et b02 FAIT
  
78. *_observations.csv : log_acquisition devient eval_quadrant :: évaluation du quadrant de l'angle de position basée sur
    orientation image (au moment de l'acquisition). FAIT TERMINÉ
    
79. Nouveau fichier environnement.txt : TERMINÉ
  79.1 contient les valeurs de l'environnement au moment de l'observation au lieu de modifier le log de FC. FAIT
  79.2 enlever ces données originales dans les logs FC FAIT
  
80. reduction_vxx, mise en oeuvre des classes : TERMINÉ
  80.1 dans classes.py, version de base FAIT
  80.2 dans reduction_v18.py --> reduction_vxx.py :
    80.2.1 intégrer classes_v3 FAIT
    80.2.2 pour typeObservation 'ech', l'us pointe par ex vers /cal_e/2021-10-08b02 et on fait le reste FAIT
    80.2.3 pour typeObservation 'complete', traitement par lot, l'us pointe la paire et on fait le reste en itérant dans N1, N2, ..., FAIT
    80.2.4 classe DoubleSessions contient un objet Systeme et une liste d'objets Observation FAIT
      80.2.4.1 creeLstObjObservations pour 'complete' FAIT
      80.2.4.2 rendu ligne 1001 calculs pour pos FAIT
      80.2.4.3 structure de dossiers, inverser dossier programme d'observation et paire et changer code FAIT

    80.2.5 nlle structure des classes : (comme dans DoubleSessions.hierarchie() )explorer l'itération avec attributs __dict__.keys() et __dict__[key] NON
    80.2.6 objet Observation devrait donc comprendre le contenu de _info_système.csv en df NON, plutôt dans l'objet Systeme FAIT
    80.2.7 objet Observation devrait donc comprendre le contenu de _observations.csv alimenté durant la reduction vs objet reduc FAIT
    80.2.8 les objets master.*.csv restent des df individuels ???? OUI
    80.2.9 garder la liste des observatoires pour planification via astroplan OK
    80.2.10 ajouter map=xxxxx dans tous les environnement.txt FAIT
      80.2.10.1 dans 'ech' --> intégrer map dans fichier master_index_cal.csv FAIT
      80.2.10.2 dans 'complete' : dans sep, pos ? FAIT
      80.2.10.3 libre FAIT
  
81. optimisation et nettoyage:
  81.1 vérifier pertinence de toutes les variables globales
  81.2 enlever #debug ...
  81.3 terminer tous les doc strings a la norme numpy

82. Refonte de astrodm (vxx) :
  82.1 doubleoutils : observatoires et lireFichiersSupport FAIT
  82.1 doubleoutils : nlle classe Systeme FAIT
  82.2 lire_informations_et_observations dans doubleoutils v31, adapter avec classes et _informations et _observation 2 = FAIT
  82.3 abandon du code relatif au traitement de l'oculaire astrométrique Microguide : nettoyage FAIT
  82.4 doublesOutils.DoubleSessions.hierarchie() :
    82.4.1 mofifier pour lister systeme en en-tête FAIT
    82.4.2 adapter pour le cas où type_observation == 'ech' : peut-être créer objet Systeme contenant index_cal_E ###############

83. doublesOutils.DoubleSessions.cree_observations_df(), etc :
  83.1 libre FAIT
  83.2 placer moyennes, etc, dans objet DoubleSessions :
    83.2.1 Moyennes rho et theta et incertitudes FAIT
    83.2.2 autres validations selon 83.5 FAIT
    83.2.3 doublesOutils.code_etat_obs_dict :
      83.2.3.1 cet objet passe dans l'objet Sessions NON
      83.2.3.1 renseigner selon résultats validations FAIT
      83.2.3.2 prévoir une fonction pour inscription par usager NON
      83.2.3.3 VALIDATION 2  continuer doublesOutils.calcule_rho, ligne 441 FAIT
    83.3 toutes les dates :
    83.3.1 enlever UTC car déjà indiqué dans les en-têtes et implicite FAIT
    83.3.2 époques B ou J?, indiquer dans en-tête résultats ###########
    83.3.3 
  83.4 _observations.csv : TERMINÉ
    83.4.1 supprimer FAIT
    83.4.2 examiner les champs pour intégration ou non FAIT

  83.5 conditions de validité : dans DoublesSessions, nous avons besoin d'une méthode qui, en plus de vérifier la validité, calcule rho et theta moy et les sigmas,
     l'époque, etc comme l'ancien rapport
    83.5.1 observations :
      83.5.1.1 OBLIGATOIRE delta_matrix_pos == delta_matrix_sep FAIT
      83.5.1.2 temp_pos observation vs temp_pos index_cal_e FAIT
      83.5.1.3 OBLIGATOIRE map observation == map de tous les index_cal_e FAIT
      83.5.1.4 intervalle entre N1 et N2 <= 7 jours? FAIT
      83.5.1.5 ALERTES si 1 ou 3 non valide FAIT
  
84. nouveau module listeReductions_*.py à prévoir OBSOLÈTE

85. changements de noms : doublesOutils_v33 et reduction_v27
  85.1 DoubleSessions.lstObservationsN -> N FAIT
  85.2 Systeme.cheminSysteme -> rep FAIT
  85.3 Systeme.nomSysteme -> nom FAIT
  85.4 Observation.lstBlocs -> b FAIT
  85.5 Observation.nbrBlocs -> FAIT
  85.6 Observation.typeObservation -> tobs FAIT
  85.7 Observation.progObservation -> prog FAIT
  85.8 Bloc.acquisitionSep -> sep FAIT
  85.9 Bloc.acquisitionPos -> pos FAIT
  85.10 Observation.nomPaire -> paire (note : doit-on déplacer dans DoubleSessions.paire??) FAIT
  85.11 doublesOutils.notes_obs_dict -> codes_etat_obs_dict FAIT
  85.12 master_calibra ... dt_obs -> dt_obs_utc FAIT
  85.13 DoubleSessions.resultats_reductions_sessions_df date_dern_obs -> dern_obs_utc FAIT
  85.14 DoubleSessions.resultats_reductions_sessions_df epoque -> époque ? NON
  85.15 doublesListeProgramme id_source -> id_system FAIT
  85.16 voir au même changement dans tous les autres modules et stturure de données id_source -> id_system : ####
    85.16.1 _informations.csv et _informations_df
  85.17 doublesOutils :
    85.17.1 delta_dt_N -> delai_entre_N FAIT
    85.17.2 resultats_reductions_sessions_df -> sommaire_obs_df FAIT
  
 
86. réduction complète : TERMINÉ
  86.1 sep, calcul de rho : validation du bloc courant ssi map sep == map échelle FAIT
 
87. doublesOutils.rapport('m') : TERMINÉ
  87.1 ajouter WDS_epoq, WDS_pa2 et WDS_sep2 FAIT
  
88. doublesOutils.DoubleSessions.cree_observations_df() :
  88.1 en rapport avec codes_etat_obs_dict, position 3 code méthode de mesure : self.etat -> codeMethodeMesure ('L') FAIT
  88.2 méthode doublesOutils.DoubleSessions.majEtat(car code, int position) : ajoute code dans position dans doublesOutils.DoubleSessions.observations_df['etat'] ???

89. doublesOutils v35 et reduction_v29 TERMINÉ
  89.1 .calcule_moyennes_sessions() compléter état, position 1 (code de suivi) sachant que sessions.etat est une liste doubles_outils ligne 698 FAIT
  89.2 méthode de validation indépendante pour vétifier les conditions d'envionnement de tous les N et blocs avec un rapport succin NON
  89.3 en corrollaire à .2 DoubleSessions.etat devrait avoir un indicateur d'alerte pour temp_to hors intervalle FAIT
  89.4 DoubleSessions.hier() avec un paramètre pour envoyer sur disque out.txt FAIT
  
90. Réduction pour STFA58 :
  90.1 dans modèles crée toute la structure avec modèles environnement.txt pour N=1, b01, comme ceci : FAIT
    N1
    └───b01
        ├───cal
        ├───pos
        │   └───reduc
        └───sep
            └───reduc
  90.2 pré-réduction de stfa58 
  
91. doubleOutils v 35 et reduction version 31 : TERMINÉ
  91.1 note version avant transformation doubleOutils v 34 et reduction version 30 NOTE
  91.2 transformer reduction en une fonction dans doublesOutils pour exécution dans un Jupyter notebook () FAIT
  
92. jupyter notebook notes (from terminal) :
  92.1 jupyter notebook --generate-config writes in C:\Users\dominique\.jupyter\jupyter_notebook_config.py :: explorer ceci
  92.2 jupyter --paths, jupyter --config-dir, --data-dir. --runtime-dir
  92.3
  
93. Script création système cree_systeme :
  93.1 renomer crée_structure_data_système_v11.py -> cree_systeme_v01.py FAIT
  93.2 d'entrée de jeu, planifier pour exploitation dans un terminal ipython ou Spyder FAIT
  93.3 tous les *_informations.csv changés aux nouvelles normes (voir cree_syste,e.py lignes 124 à 139 FAIT
  93.4 finir de documenter le module FAIT
  93.5 utiliser la classe astrodm.doublesOutils.Systeme pour créer un objet système (voir 103) FAIT
  93.6 ajouter création du répertoite planif dans le dossier du système
  
94. Module de planification, voir 95.2.1 pour conditions??? une tel module est-il nécessaire???
  94.1 renomer cree_systeme_v10 --> planif_v01 (il s'agit du code de base) FAIT
  94.2 d'entrée de jeu, planifier pour exploitation dans le cahier Jupyter du système_paire

95. module de liste des programmes :
  95.1 listeProgrammesDates_v05 --> liste_programmes_v01, voir cartable planification pour exemple tableau,  astrodm\doublesListeProgrammes (version 8) FAIT
  95.2 parcoure les dossiers : rendu ligne 84 et avec test1.py FAIT
  95.3 choix de la liste de tri : intégrer dans doublesListeProgrammes et référer dans liste_programmes_v01 FAIT
  95.4 corriger ceci : FAIT
        Nbr sources différentes lues :  15.
                  Nbr prog obs lus :   8, dont
                  
  95.5 liste des programmes, valider chaque élément de la liste pour une structure correcte avec une RE NON
  95.6 fonction est_une_paire() : FAIT
       prévoir le cas où il existe d'autres sous-dossiers que des paires :: trouver normes de nomenclatures pour valider ######### voir STTA254
       voir «A New Classification Scheme for Double Stars, 25th meeting of the IAU, Special Session 3, 18 July, 2003 in Sydney, Australia, meeting abstract, id. 3»
       voir https://en.wikipedia.org/wiki/Star_system#Multiple_star_designations
       
  95.7 N obs = <NA> si non défini FAIT
        
  95.8 valider les résultats (programmes) ###################
  95.9 mettre en oeuvre un système de filtres (const, État, programme, etc) voir xemples de querry à la fin #############
  
96. module pour créer nlle session durant les acquisitions : NON
  96.1 d'entrée de jeu, planifier pour exploitation dans terminal ipython, avec deux approches :
    96.1.1 créer un ensemble «à la pièce», selon 93.3
    96.1.2 créer un «ensemble» (répertoires et fichier environnement.txt) pour Nx complet, avec deux blocs, x = no session courante
  96.2 placer le module dans captures
  96.3 sélection interactive du dossier du programme d'observation et création par le contexte :
    96.3.1 SI dans P..., ET SI N n'existe pas, alors crée struc complète comme 96.5 pour N=1, b=b01
           SI dans P ET Nn existe, alors créer Nn+1 pour b01
           SI dans Nx ET SI bnn existe, alors créer bnn+1
  96.4 par paramètres nouv_session('STTA254-AB', p='p2021-023', n=1, b=1) NON
 
97. dossiers des systèmes et cal_e : TERMINÉ
  97.1 déplacer tous les  (med) dans le même dossiers pour limiter le nombre d'eclusions de répertoires lors des recherches FAIT
  97.2 cal_e se trouve dans des\med FAIT
  
98. divers :
  98.1 doublesOutils.info_src_wds() :
    98.1.1 si erreur, rapporter aussi la paire recherchée
    98.1.2 modifier pour valider existance d'une paire : p. e. : do.info_src_wds('STTA254', 'AB', valider=True) FAIT
  98.2 cree_systeme : lire fichier info : oui mais, quoi faire après? FAIT
  98.3 doublesOutils ajouter fonction pour lire par pickle.load un objet sessions et retourner l'objet 
  98.4 explorer ceci p = result_rech_WDS['B/wds/wds'].to_pandas(), alors la seconde ligne des labels (unités) est disparue
  98.5 doublesOutils --> doublesoutils,  FAIT
  98.6 doublesListes --> doubleslistes,  FAIT
    
99. Planification (par astroplan, etc) :
  99.1 dans dossier système\paire sous-dossier «planif» nécessaire dans le dossier de système?
  99.2 le modèle pour le cahier Jupyter <système>_astrométrie est STTA254_astrométrie.ipynb OK
  
100. Liste des réductions
   100.1 le code suivant trouve les chemins complets de chaque fichier obj dans path_name : TERMINÉ
   
     path_name = r'D:\DOCUMENTS\Astronomie\dev\med\**\*.obj'
     res = glob.glob(path_name, recursive=True)
     
     Il est alors possible de parcourir res pour produire la liste des réductions.
     
   100.2 Le module doublesListeProgrammes devient doublesListes : FAIT
      100.2.1 nlle fonction produit_liste_reductions :: utilise 100.1 pour trouver les réductions FAIT
      100.2.2 nlle fonction imprime_liste_reductions qui appelle produit_liste_reductions FAIT
      100.2.3 examiner le compteur «systèmes différents» -> «objet sessions examinés» FAIT
   
   100.3 nouveau module liste_reduction FAIT
   
   100.4 module doublesOutils.reduction :
      100.4.1 les label des colonnes doivent être les mêmes pour l'ensemble des structures de données :
         100.4.1.1 prog = obs_prog
         100.4.1.2 paire = pr
         
101. Documentation libreOffice :
   101.1.1 Terminer travail 4.1.1 PRÉ-RÉDUCTION-POS
   101.1.2 terminer travail PRÉ-RÉDUCTION-SEP-ECH FAIT
   101.1.2 Valider travail 4.2 PRÉ-RÉDUCTION-SEP-ECH

102. Exploration astroplan, astropy et astroquery (astroplan_v01.py) : (https://astroplan.readthedocs.io/en/latest/api.html#module-astroplan)
   102.1 étudier explorer astropy.table :
      102.1.1 astropy.table.table.Table + doublesOutils.result_rech_WDS['B/wds/wds'].info()
         102.1.1.1 voir méthode table_astropy.to_pandas() (https://docs.astropy.org/en/stable/table/pandas.html#pandas)
      102.1.1 astropy.table (qui permet de travailler avec des unités astropy.Quantity) :: création possible à partir d'un df
      
   102.2 cahier Jupyter astroplan_1 devient Astropy/astroplan_v01.py pour tests généraux FAIT
      102.2.1 avec TheSkyX, vérifier les résultats de plot_airmass() selon les paramètres fournis : Time est [UTC]?
      102.2.2 explorer variable cible (FixedTarget)
      102.2.3 explorer variable coordinates (SkyCoord) : important, quel est le frame fournis par WDS (fk5, icrs, ??)
      102.2.4 explorer variable observer (Observer)
      
   102.3 explorer datetime, :
      102.3.1 do.creeDateHeureLocale(dth_observation.isot +'UTC') requis pour obtenir une heure locale (UTC-4 ou UTC-5)?
      102.3.2 doublesOutils.UTCaHeureLocale :: terminer pour retourner heure locale avec prise en compte automatique de HNE ou HAE
   
103. Classe  astrodm.doublesOutils.Systeme (doublesOutils v. 37) : TERMINÉ
   103.1 méthode __init__ :
      103.1.1 paramètres keyword FAIT
      103.1.2 utiliser la méthode astropy.coordinates.SkyCoord.get_constellation(short_name=True) pour compléter le champ const FAIT
      103.1.3 changer code d'exploitation ailleurs selon le cas FAIT

104. astrodm_imprime_api_v01, création api en txt : OBSOLÈTE
   104.1 astrodm_api.txt -> doublesOutils_api.txt
   104.2 créer doublesListes_api.txt

105. conda packages; mise à jour de versions : TERMINÉ
   105.1 astropy v5.3.1 -> v5.x FAIT
   105.2 anaconda désinstallé 2022-02-08, car dans spyder 5, fonctions de debug plus fonctionnelles FAIT
   105.3 réinstallation anaconda3 2021.11 (64-bit) FAIT
      105.3.1 IPython 7.29.0 par défaut OK
      105.3.2 astropy v. 4.3.1 par défaut OK
      105.3.3 conda install -c astropy astroquery (astroquery v 0.4.5) FAIT
      105.3.4 conda list astropy indique v5 disponible, conda install astropy=5.0 FAILED
      105.3.5 conda install -c astroplan astroplan (vsersion 0.8) FAIT
   
   
106. doublesListes :
   106.1 terminer docstring FAIT
   106.2 Liste_info_systemes : nouveau modules pour parcourir med et lister tous les info_systèmes dans un df trié FAIT
   106.3 cree_systeme_v03 :
      106.3.1 intégrer à doublesListes ??
      106.3.2 lecture d'un fichier excell formaté correctement, avec/sans programme FAIT
      106.3.3 pour lire libre office ods :: conda install -d -c conda-forge odfpy (-d == dry run, enlever pour installation) 1.4.1 FAIT
      106.3.4 doublesOutils.valide_nom_systeme() : avons-nous besoin de retourner un tupple avec résultat recherche WDS?
      106.3.5 fichier Excel, colonne choisir 0, 1 FAIT
      106.3.5 fichier Excel produire un modèle PAS NÉCESSAIRE NON
      106.3.6 créer dossier planif et copier modèle de cahier Jupyter FAIT
      106.3.7 enregistrer_sur_disque à réviser : méthodologie et code FAIT

   106.4 liste_programme_v05 : TERMINÉ
      106.4.1 STTA254 AB : si P2022-001 ajouté, alors P2021-023 disparait pour cette paire BUG OK FAIT
      106.4.2 doublesListes.imprime_liste_programmes() : prévoir sortie sur disque dans ./planif avec un systag FAIT
      106.4.3 créer dossier planif et copier modèle de cahier Jupyter FAIT
      106.4.4 le décompte des programmes non assignés est incorrect. En fait, bu305 et stf100 n'apparaissent psa dans la liste OK FAIT
      106.4.5 vérifier le fonctionnement de path.basename dans le cas ou le chemin se termine par '\' ou '\\' FAIT

107. planification
   107.1 recherches wds et production de liste à partir de vizier en ligne ou astroquery :
      107.1.1 critères de recherche :
        - cadrage RA/DEC rectangulaire
        - sep >= 3 arcsec
        - différences de magnitudes
        - Obs2 <= année en cours - 3 ans?
   107.2 format de sortie (fichier)
     - csv FAIT
     - FITS (ascii) Table?

108. pydoc :
   108.1 comment extraire certaines chaîne comme TODO des commentaire d'un module?
   108.2 les TODO et (autres) peut-être dans un cahier Jupyter
   
109. documentation :
   109.1 Liste_info_systemes.py «package python informations.odt»
   106.2 cree_systeme_v03 nlle procédure pour fichier excel  «package python informations.odt»
   106.3 liste_programmes_v05  «package python informations.odt»
   106.4 liste_reductions
   106.5 ABSOLUMENT dans informations.odt, documenter structure d'un objet Sessions

110. en général : TERMINÉ
   110.1 assert condition, message : pas de print nécessaire, et formattage de chaine ok FAIT
   110.2 vérifier tout le code pour fonctionnement lors de la mise en production, version beta : FAIT
      110.2.1 cree_systeme_v04.py OK
      110.2.2 Liste_info_systemes_v01.py OK
      110.2.3 liste_programmes_v05.py 
      110.2.4 liste_reduction_v02.py OK
      110.2.5 reduction_v31.py OK
      110.2.6 astrodm.doublesOutils OK
      110.2.7 astrodm.doublesListes OK
      110.2.8 cas de observatoires.csv OK

#
# Mise en production, versions beta
#

111. préparation pour version beta_1 (modèle == dev/med) TERMINÉ
   111.1 : élaguer structure de dossier dans data/med
      111.1.1 examiner _informations.csv et placer dans lot excel Lot_2022-001_migration.ods FAIT
      111.1.2 archiver med dans data/med_avant_migration_astrodm_v2 FAIT
      111.1.3 data/med : enlever tous les éléments de l'ancienne structure FAIT

   111.2 Astronomie/data : TERMINÉ
      111.2.1 enlever anciens *.py FAIT      
      111.2.2 copier ./dev/modèles/* ---> Astronomie/data FAIT
      
   111.3 Astronomie/dev : TERMINÉ
      111.3.1  archiver cree_systeme_v01.py à v03 FAIT
      111.3.2  * cree_systeme_v04.py --> cree_systeme_beta01.py FAIT
      111.3.3  copier Liste_info_systemes_v01.py --> Liste_info_systemes_v02.py FAIT
      111.3.4  archiver Liste_info_systemes_v01.py FAIY
      111.3.5  * Liste_info_systemes_v02.py --> Liste_info_systemes_beta01.py FAIT
      111.3.6  archiver rapport_réduction_v05.py FAIT
      111.3.7  archiver liste_programmes_v01.py à liste_programmes_v02 FAIT
      111.3.8  * liste_programmes_v05.py --> liste_programmes_beta01.py FAIT
      111.3.9  copier liste_reductions_v01.py --> liste_reductions_v02.py FAIT
      111.3.10 * liste_reduction_v02.py --> liste_reduction_beta01.py FAIT
      111.3.11 archiver reduction_v26.py à v30 FAIT
      111.3.12 * reduction_v31.py --> reduction_beta01.py FAIT
      
   111.4 cal_e : TERMINÉ
      111.4.1 Astronomie/dev/med/cal_e --> Astronomie/data/med/cal_e FAIT
      111.4.2 Expurger Astronomie/data/med/cal_e des données de développement FAIT
      
   111.5 ...dev/*_beta*.py copie--> .../data FAIT
   111.6 dev/med/STTA254 copie--> data/med, puis garder seulement données pour N1, b01 FAIT

   111.7 TESTS INITIALS PRODUCTION : TERMINÉ
      111.7.1 exécuter cree_systeme_beta01.py FAIT
         111.7.1.1 BUG do.valide_nom_systeme('VBS39') ne passe pas, mais do.valide_nom_systeme('vbs39') passe? OK
      111.7.2 exécuter Liste_info_systemes_beta01.py FAIT
      111.7.3 exécuter liste_reduction_beta01.py FAIT
      111.7.4 exécuter liste_programmes_beta01.py FAIT
      111.7.5 exécuter reduction_beta01.py FAIT
      
112. En production doublesOutils_v38.calcule_moyennes_et_sommaire_des_sessions() :
   112.1 vide
   112.2 Au sujet des filtres utilisés lors des acquiaitions sep et pos : quoi faire?
   112.3 continuer calcule_moyennes_par_session, voir test_tupples_dates_v09.py pour algorythme FAIT
   112.4 toutes les sessions valides seront réduites et placées dans DoubleSessions.reductions_des_observations_df. FAIT
   112.5 Par la suite, une moyenne pourra être produites pour tous les groupes de sessions qui sont espacées de moins FAIT
       de 7 jours et les résultats placés dans moyennes_par_session_df. La liste triée des délais peut
       servir à produire le tableau
       
       Par ex. pour le cas de cette liste des délai pour 5 sessions d'observations (ceci est plutôt extrème).
       Dates
				[(1, '2021-10-12'), (2, '2021-10-14'), (3, '2021-10-17'), (4, '2021-10-19'), (5, '2021-10-25')]
				
				Liste triée des délais de moins de 7 jours :
				[(1, '2021-10-12'), (2, '2021-10-14'), 2]
				[(3, '2021-10-17'), (4, '2021-10-19'), 2]
				[(2, '2021-10-14'), (3, '2021-10-17'), 3]
				[(1, '2021-10-12'), (3, '2021-10-17'), 5]
				[(2, '2021-10-14'), (4, '2021-10-19'), 5]
				[(4, '2021-10-19'), (5, '2021-10-25'), 6]
				[(1, '2021-10-12'), (4, '2021-10-19'), 7]

				Il y a plusieurs groupes valides pour calculer la moyenne pour resultats_pour_publication_df.
				Voici une belle présentation (dataframe?).
				
				Choix     Dates  delai (j)  Sessions (N)
				----------------------------------------
				(1)       12,14          2           1,2
				(2)       17,19          2           3,4
				(3)       14,17          3           2,3
				(4)    12,14,17          5         1,2,3
				(5)    14,17,19          5         2,3,4
				(6)       19,25          6           4,5
			  (7) 12,14,17,19          7       1,2,3,4

				Les moyennes seront placées dans resultats_pour_publication_df mais, au moment opportun, il faudra
				choisir un et un seul interval lors de la publication!

      112.5.1 resultats_pour_publication_df : N devient une liste des sessions utilisées pour calculer les moyennes, par ex. : FAIT
                  N  dern_obs_utc
          3 : 1,2,3    2021-10-16
      
   112.6 calculer_pour_publication :
      112.6.1 modifier pour utiliser moyennes_par_session_df avec algorythme 112.5 (mis en oeuvre dans test_tupples_dates_v11) FAIT
      112.6.2 corriger bug pour une seule session N=1 voir ligne 934 et dérivation 946 FAIT
      112.6.3 cas des sessions isolées et valides dans moyennes_par_session_df : lister dans resultats_pour_publication_df
        p. e. si on rend N3, b01 valide pour delaiDepuisAcqEchValide, avec un nouvel index de calibration pour le 24 octobre, on aura une session isolée FAIT
        
      112.6.4 ligne 1054 enfin s'occuper du code d'état!!! FAIT
      112.7 vérifier tous les modules de listes (surtout des observations) pour voir comment cela s'accorde avec la nlles structure des groupes : FAIT
         112.6.1 liste programmes : ordre de tri Date_obs_N --> Dates_UTC FAIT
         112.6.2 liste info_systeme FAIT
         112.6.3 liste réductions FAIT
         
      112.8 pour STTA254, voir pour différentes combinaisons d'organisation de sessions N :
         112.7.1 juste N1 ou juste N2 ou juste N3 (dont les blocs d'observations ne sont pas valides) non acceptable pour publication État X?
           moyennes_par_session_df est vide
         112.7.2 N2 et N3 ou N1 et N3
         112.7.3 situation absurde ! : qu'arrive-t-il si les dates des N ne sont pas en ordre?
         
      112.9 pour les rapports et listes : TERMINÉ
         112.8.1 réduction détail des blocs d'obs, enlever observatoire et observateur?? NON
         112.8.2 réduction détail des blocs d'obs et moyennes par session et moyennes des groupes : harmoniner les noms et l'ordre des colonnes FAIT
            112.8.2.1 reductions_des_observations_df.obs_DH_UTC --> Date_UTC FAIT
            112.8.2.2 moyennes_par_session_df.dern_obs_utc --> Date_UTC FAIT
            112.8.2.3 resultats_pour_publication_df.Dates --> Dates_UTC FAIT
          
         112.8.3 réduction Sommaire des dates des sessions : est-il nécessaire de lister?
         112.8.4 réduction Candidats .. REGROUPEMENT manque un S CORRIGÉ
         112.8.5 liste programmes : mise à jours des États C.L vers TAL si délai > 7 jours FAIT
         

113. note : self.reductions_des_observations_df.loc[:,'N':'obs_DH_UTC'] donne : FAIT
			   N bloc               obs_DH_UTC
			0  1    1  2021-10-09T00:29:59.886
			1  1    2  2021-10-09T00:39:59.886
			2  2    1  2021-10-16T02:44:39.845
			3  2    2  2021-10-16T02:35:12.815

114. doublesoutils.reduction : TERMINÉ
   114.1 doublesoutils.reduction --> doublesoutils.post_reduction FAIT
   114.2 quel est le comportement si pour un programme en cours, avec N > 1, l'une des sessions n'a pas de pré-réduction (dossier reduc n'existe pas ou vide)? FAIT
   114.3 comment utiliser doublesoutils.post_reduction pour juste obtenir l'état d'un programme en cours n'ayant pas de pré-réduction ou ayant fait l'objet d'une pré-réduction
         partielle? FAIT
   114.4 modifier pour une réduction silencieuse, (conditions d'erreurs = journalisation) FAIT
   114.5 vérifier usage de .reduc.valide : qu'est-ce que cela indique. par ex. dans le ca de SFTA58 où aucune réduction n'est fait, mais cet
         attribut est quand même True??? OK
   114.6 vérifier valide pour :
      114.6.1 sep et pos : BU105 ok, STFA58 ok, FAIT
      114.6.2 reduc : BU105 ok, STFA58 ok, STF668 ok FAIT
      114.3.3 vide

115.liste des programmes :
   115.1 N (obs), le nombre devrait indiquer N p/r aux nombres de sessions utilisées pour le calcule de la moyenne FAIT
   115.2 doublesListes v 12; liste des programmes, actualiser délai des N=1 (état C.L) p/r à la date de production du rapport pour faciliter planif pour compléter les observations : FAIT
   115.3 que faire avec 'Date_obs_N'? FAIT
   115.4 que faire quand pickle.load ne fonctionne pas? FAIT
   115.5 produire_liste_programmes_obs, ligne 419 : comment évaluer la concordance d'un programme avec les données dans s (objet DoubleSessions) ? FAIT
   
   LOGIGRAME V 4
   115.6 s'il existe obj, algorithme pour trouver s'il peut exister des données (valides) disponibles pour pré-réduction : FAIT
         il y a au moins un bloc b, avec b.sep.ncfla != None and b.pos.ncfle != None, ET b.reduc.ncflr_pos == None ET b.reduc.ncflr_pos == None
          
   115.7 avec des S présents, s'il n'existe pas de obj, alors do.listeLogsReduc(ch_prog) nous donnera la liste des Rlog_ de ch_prog, alors il faut indiquer que des données sont
         prêtes pour pré-réductions FAIT
         
   115.8 compléter etat = 'CRL', analyse des blocs : TERMINÉ
      115.8.1 Dates_obs_UTC_N, reformatter en date isot FAIT
      115.8.2 echeance et delai  (ligne 541) modèle ligne 817 FAIT
      115.8.3 qu'est-ce qu'il se passe pour la dernière session de STTA254 Etat devrait être 'TXL' OK FAIT
      
   115.9 compléter pour :
      115.9.1 décompte, ATTENTION voir le nouveau codes_etat_obs_dict et rafiner avec les type TX, TR, etc. FAIT
      115.9.2 le tri FAIT
      115.9.3 enlever ancienne fonction produit_liste_programmes_obs FAIT
      115.9.4 modifier module d'appel liste_programmes_beta_v03 pour invoquer dl.imprime_liste_programmes(..._df) FAIT
      115.9.5 comment filtrer les résultats lorsqu'il y aura un grand nombre? par const, intervalle de programmes, par État, etc:
        rech = 'CRL'
        rech = ['  ?', 'P L']
			  ... liste_des_programmes_df.query("État == @rech")
			  rech = ['STF1110', 'VBS39']
			   ...liste_des_programmes_df.query("id_system == @rech")
			   ...liste_des_programmes_df.query("id_system != @rech")
			 liste_des_programmes_df.query("const == 'Leo' and État == 'P L'")
   115.10 démêler doubleslistes ligne 458 détermination de s à jour utiliser une méthode self.checksum() dans objet doubleSessions FAIT
   115.11 terminer le décompte des États FAIT
   115.12 désactiver un bloc avec b01 --> x01 FAIT
   115.13 DANS DES NOUVELLES VERSIONS DES DEUX MODULES : post-réduction et liste des programmes (48 et 19) :
      115.13.1 STTA254 tester pour S3 TXL de nouveau OK
      115.13.2 STTA254 tester seulement S1, b01 et b02 : OK
        a) régler delai == 0, devrait être NaN? OK
        b) tester pour échéance non passée (état = CEL) OK
        
      115.13.3 STTA254 tester seulement S1, b02 OK
      115.13.4 STTA254 tester seulement S2 OK
   115.14 avec STTA254 TAL pour session 3, la colonne 'N (obs ou S)', indique le nombre de session (1), pas la session qui est TAL OK

116. doublesoutils.DoublesSessions.hier() :
   116.1 ajouter la liste de reductions_des_observations_df ?
   116.2 ajouter la liste de moyennes_par_session_df ?
   116.3 ajouter la liste de groupes_de_sessions_df ?

117. objet doublesoutils.DoublesSessions : ?????????????
   117.1 objet maintenant utilisé aussi pour 'ech' :: il faudrait tranformaer DoublesSessions en classe principale et
     créer sous-classes DoublesSessionsComplete etDoublesSessionsEchelle.
     
     ALTERNATIVEMENT :
      créer deux classes séparées car elles n'ont presque rien en commun :
       DoublesSessions --> DoublesSessionsComplete FAIT
       copier DoublesSessionsComplete --> DoublesSessionsEchelle puis modifier

118. tableau des états D:\DOCUMENTS\Astronomie\dev\astrodm_doc\tableau d'état.ods FAIT

119. doublesoutils.extraire_Log_acq_env :
   119.1 ligne 2158 : temp_to est requis ? pour calculer écart de température?

120. re-tester post_reduction avec 'ech' FAIT

121. optimisations générales :
   121.1 enlever les #debug
   121.2 vérifier les #TODO
   121.3 bloc.indexBloc --> bloc.noBloc FAIT
   121.4 no_bloc-1 --> index_bloc FAIT

122. doublesoutils.DoubleSessionsComplete:
   122.1 attribut etat est-il encore utile, car il représente seulement l'état d'un seul des groupes d'observation OK

123. liste des réductions à réviser FAIT

124. post-reduction(): TERMINÉ
   124.1 si une session est valide, alors il devarit y avoir un groupe de session pour cette session dans groupes_de_sessions_df?
     voir calculer_pour_publication() FAIT
   124.2 doubleoutils v_50 :
      124.2.1 reductions_des_observations_df :
       theta --> pa FAIT
       rho --> sep FAIT

125. Liste des systèmes pour post-réduction si changement à la structure de DoubleSessions
   125.1 STTA254
   125.2 STF668
   125.3 BU105
   125.4 STFA58

126. vérifier fonctionnement de cree_systeme_beta01.py
   126.1 lecture et modif d'un csv OK
   126.2 Saisir ID système : OK
      126.2.1 cas existe
      126.2.2 cas nouveau
   126.3 vrac <----
   126.3 Const correctement évaluée?

127. cree_systeme_beta03: TERMINÉ
   127.1 vérifier le fonctionnement pour mise à jour des _informations_df, voir si cahiers Jupyter non touchés
      STF1321 ajouter deux noms alternatifs bidon1 et bidon2 FAIT OK
      STF60 : HIP 3821 --> HIP3821 FAIT OK
      SFT1744 : zet Uma -> zet UMa FAIT OK

128. 2022-08-09, anaconda 2021-11, màj manuelle (conda ...) TERMINÉ
     spyder 5.2.2 fucked up et la version 5.1.5 de Spyder (Anaconda 2022-05) à un bug avec input.
     D'après anaconda.org, la version Spyder 5.3 règle ce problème, mais n'est pas fournie encore dans la distro Anaconda.
   128.1 désinstallé anaconda par Windows Applis FAIT
   128.2 réinstallation Anaconda 2021.11 (64-bit) FAIT
   128.3 conda list astropy retourne 4.3.1 OK
   128.4 conda install -c astropy astroquery (v. 0.4.6) OK
   128.5 conda install -c astropy astroplan (v. 0.8) OK
   128.6 conda install -c conda-forge odfpy (pour lire fichier LibreOffice calc)
   
   128.6 test spyder 5 :
      128.6.1 lancement app, Aide -> À propos indique version 5.1.5 OK
      128.9.2 test astrodm liste des programmes OK

129. Installé Pandoc et MiKTex pour la conversion des Markdown vers PDF (2022-08-09) TERMINÉ

130. créer nlle fonction qui mélange liste des programmes et liste des informations :
  id_sys = 'STT490'
  # composer la chaîne de recherche
  cherche = 'id_system == ' +  '"' + id_sys + '"'
  info_systemes_df.query(cherche) retournera :
  
  id_system      id_WDS      RAJ2000      DEJ2000 id_system_alt1 id_system_alt2 const remarques
9    STT490  23102+5727  23 10 09.51  +57 26 54.1             ""             ""   Cas    "CDSA"
   130.1 faire une fonction dl.liste_info ... 
     if __name__ == '__main__':
       # on est en mode interactif
       
     else:
       # on est en appel de fonction

131. doublelistes.imprime_liste_reductions : (dev)
   131.1 bug : décompte des programmes différents et objets sessions examinés incorrects

   États des 1 enregistrements
 -----------------------------------
    0 terminés.

         devrait être 1 terminé.

132. git :: vérifier les conséquences de ceci
warning: in the working copy of 'astrodm/doubleslistes.py', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'astropy-tests/.ipynb_checkpoints/Untitled-checkpoint.ipynb', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'astropy-tests/.ipynb_checkpoints/astroplan_1-checkpoint.ipynb', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'astropy-tests/Untitled.ipynb', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'astropy-tests/astroplan_1.ipynb', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'astropy-tests/calcZeropoint.py', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'astropy-tests/coordinates/.ipynb_checkpoints/Coordinates-Intro-checkpoint.ipynb', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'astropy-tests/coordinates/.ipynb_checkpoints/coords_2-checkpoint.ipynb', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'astropy-tests/coordinates/Coordinates-Intro.ipynb', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'astropy-tests/coordinates/coords_2.ipynb', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'astropy-tests/coordinates/coords_2.py', LF will be replaced by CRLF the next time Git touches it

  
ORDRE DES PRIORITÉS
131.
126.
115.9.5
98.4
90.2 Réduction pour STFA58

note
maintenant.to_value('isot').split('T')[0]